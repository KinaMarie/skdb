title: architecture of skdb

main concepts:
- packages:
- dependencies:
    types: *dependencies
    dependency sets:
        each package has at least one dependency set that must be satisfied (in special cases that one set can be null)
        without satisfaction of a dependency set, the package is probably useless (a broken install)
        a package with multiple dependency sets allows there to be unique buildtime, runtime and software dependencies for different situations
        for instance, certain buildtime dependencies might demand certain runtime dependencies
- instructions:
    description:
        sequences of steps for humans and machines for any of the different scenarios (build, run, maintenance, software, uninstall)
        usually generated by running instruction generation code from each of the dependencies
    wishlist:
        - zoomable text detail: see engelbart
        - 3D animation: see 'parameterized action representation' papers for neat diagrams
        - 2D: see lego instructions
        - sentence planner: #spud
            - generate different sentences that say the same thing given the same input
            - English grammar
            - tree-adjoining grammars: xtag
    concepts:
        - ActionPrimitive
        - Action
            - precondition for an action to begin (applicability conditions)
            - postcondition for an action to end (culmination conditions)
            - agent or actor (formal cause)
            - object or actee (that which is acted upon) #aka "subject"?
            - manner:
              - qualitative adjectives (descriptions) of an action
              - quantitative adjectives (descriptions) of an action
        - Step (same as Action?)
        - virtual human actors to verify instructions
    open questions:
        - where are steps (in instructions) written down in skdb?
        - how do you translate from an action to machine code or natural language?
        - how do instructions from other packages contribute to instructions for dependent packages?
        - a grammar for the language of human instructions? #see f16 maintenance manuals (internal fuel tank vent)

types of dependencies: &dependencies
    build time:
        synonym: make time
        description:
            if part Y must be used to make current part X
            then X has a buildtime dependency on Y
        examples:
            - a screw has a buildtime dependency on a lathe
    run time:
        synonym: use time
        description:
            if part X is unusuable when without part Y
            then X has a runtime dependency on Y
        examples:
            - a washer is useless without a part securing it
    maintenance time:
        strength: weak
        description:
            if part X can generally be repaired or maintained with part Y
            then X has a maintenance dependency on Y
        examples:
            - maintenance of electrical wires on a breadboard may require wirestrippers
    software:
        description:
            if the skdb representation of part X is unusuable without the skdb representation of part Y
            then X has a software dependency on Y
        examples:
            - library header files required for compiling support into another program
            - precompiled object or shared library for link time (i.e., package X requires a shared library from Y if you compile package X)
            - precompiled object or shared library for software run time (i.e., package X loads up the lib.so file (not compiled in))
    uninstall:
        synonym: trash time
        description:
            tools required to disassemble and recycle this package's installation and purge it from all systems
            uninstall dependencies must work for any configuration of buildtimes, runtimes, maintenance, or software dependencies for the given package.
        examples:
            - screwdriver to take out screws from a plastic assembly

commands:
- skdb soft get #download skdb representations and software dependencies
- skdb hard get #figure out which dependency set to grab and the package to do buildtime and runtime, etc.
- skdb build lego #spit out instructions for buildtime of a certain package
- skdb run lathe #spit out instructions for runtime of a certain package
- skdb maintain drillpress #spit out instructions for maintenance time of a certain package
- skdb uninstall #spit out instructions for disassembly, or commands to machines for disassembly, plus uninstall the skdb packages too


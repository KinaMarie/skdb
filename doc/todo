documentation:
    everybody loves documentation!
skdb core:
    units:
        peak and continuous ratings: what are default time constants?
        yaml path resolver: for max/min/peak/continuous/power/torque/height/width etc
        yaml regex resolver: how to do this without matching over entire units .dat?
    statistics:
        arbitrary distributions: processes often follow odd laws (non-gaussian)
        evaluate typical feasible: but dont dump some messy construct
        think about how to utilize statistical data: in search/optimization algorithms
    geom:
        wrap TopoDS_Shape in Shape class:
            make assembly graph yaml dump work:
        get rid of STEP loading spam:
            and other OCC spam:
        real wrapper code: instead of subclassing from OCC. openGL example
        connection graph:
            apply transforms at each arc while traversing: is this done?
            wrap some graph class instead of using directly for easy swapping:
        part mating:
            collision detection:
                unit test:
                improve occ mass calculation:
        cam algorithm selection: some parts are more 2.5d than others...
    generating instructions:
        figure out something better than the techniques.py proposal:
inventory:
    container tags: ['!ziploc', '!fishtub', etc]
    location schema: any ideas? no dGPS or RFID please. '!shelf'?
package code:
    generate instructions for making a package: lego explohzionn
    technology readiness level:
    metadata resolution description: [stub, incomplete, usable, finished, obsessive]
clients: #desktop, unless you really like writing javascript?
    pyjamas: ?
    skdb-get:
        description: "it's like apt-get/dpkg except for hardware and real stuff"
        see: skdb/clients/tb-get/
        note: write unit tests first to verify dependencies are satisfied
    visualization:
        dependency tree browser:
        CAD file visualization:
        screenshot gallery generator from CAD files: #is this not the same thing as above?
            partially working: imgcad.py (ask kanzure)
            better version:
servers:
    djangit:
        remove all mysql dependencies:
        debugging:
        views:
            generic yaml tree: 
                js code folding: pyjamas
                highlighting: geshi?
                links to skdb tags:
            package metadata:
                links to dependencies:
                backlinks to functionality:
                    taxonomy browser:
            3d: 
                ldraw:
                step:
                iges:
                stl:
                dxf: ew
            pcb formats:
                gerber:
                eagle:
                kicad:
                pdf: (?)
            gcode:
        protocol annotation module:
            protocola: #50% bog water, 50% chocolate syrup. yummy!
        instruction output: #assembly, etc.
        b2b: Tie-in of "open source hardware directories" with "one-click ordering" and sourcing of materials from suppliers
        funding models:
            rspp: as in ' http://www.logarithmic.net/pfh/rspp '
            oshwbank:
            paypal button: this ought to be easy
            bounty:
import:
    pov-to-X conversion:
    parser for peeron and lugnet:
    parse matweb scrape: (samrose)
    ldraw to step: implicit geometry recognition?
    stl to step:
        feasibility: low
    ldr to pyldraw: needs testing (ask kanzure)
        convert ldr lego theo jansen mechanism:
    pybox2d to skdb:
        convert theo jansen mechanism:
export: #external simulations
    pyODE:
    pybox2d:
    cam algorithms:
        pycam: 
        kurve: 
        libactp:
        celeron55 gerber: maybe
stuff to package:
    screw: 
        catalog generator script:
        cad generator:
            how to deal with generated data:
            not blow up without OCC:
        internal graph model of a spring:
            two bearings:
            spring:
            equation:
    thread:
        common metric sizes:
        common SAE sizes:
        cad generator: 
    lego:
        finish technic grammar:
        parse .lst and catalog files:
        bricklink cost evaluator: scraper
        cad generator:
        do inventory:
        fix existing cad models: scale is wrong. re-measure?
    trans-tech: at least at low resolution
    construction materials: #these are categories, not individual materials. low-tech and inexpensive to start with
        metal:
        plastic:
        wood:
        foam:
        paper:
        glass:
        rubber:
        ceramic:
        composite:
            concrete:
        food: cheese robots, attack!
        phase change materials: does cheese count? maybe tags instead of categories
    bearing:
    plastic gel box case:
        get cad files from tito:
            author: Tito Jankowski
            links:
            - "http://www.pearlbiotech.com/wp-content/uploads/2009/05/pearl_biotech-gel_box_cad.skp"
        find and verify generator script:
            author: Michael Katsevman
            links:
            - "http://groups.google.com/group/diybio/msg/fb0cb0b7d6bf9b35"
            - "http://logarchy.org/electrophoresis.py"
    test tube holder: #why?
        standard eppendorf tube rack: much more useful
        96 well plate: 
    transilluminator: #gel imager
    mechmate:
    arduino:
    technical devices: i guess? at least its a source of ideas for components
    mcmaster catalog: same deal

---
description: pymates-todo (old)

2009-07-27:
    * use tags/names for geometories in pymates/models/blockhole.yaml
    * unit tests for part mating
        * turn skdb/doc/proposals/assemblies.txt into unit tests
    * more example parts: legos?
        * attempt to extract data from LeoCAD and ldraw
            # ok. had some fun.
        * attempt to extract data from Regli's National Design Repository (lego VRML files)
        * come up with a lego brick generator?
        * integrate skdb/doc/proposals/legos.py with pymates/pymates.py
    * shaft in a lego brick:
        * slop (a distance)
           * the minimum distance between those two surfaces
           * whereas intersection is the maximum distance between those two interfaces
        * play
        * sine distance function
            * circular peg in a square hole
            * zero: perfect fit
            * positive: a little bit of slop
            * negative: interference fit
            * distances between two surfaces in OpenCASCADE
                * in which case you need faces
         * Constructive Solid Geometry
            * any volume leftover?
         * put the block into a bigger block and get the "mold"
            * amount of space remaining
            * do the subtraction again and get the space remaining - to get the slop
         * distances between faces v. solid geometry approach
    * read STEP ISO 10303
        * figure out how to add a feature to the file (instead of using pymates/models/blockhole.yaml)
            # well that was a dead end. Solidworks, AutoCAD, and even PRO/E can't seem to do annotations with STEP ISO 10303 AP214.

2009-07-30:
    * unit tests for part mating
        * turn skdb/doc/proposals/assemblies.txt into unit tests
            * python-graph dependency?
        * skdb/doc/proposals/legos.py unit tests
        * skdb/pymates/test_part.py tests
    # code: visualization of arrows/vectors for "interface points"/"control points" (yay feedback)
        # make_arrow() in skdb/paths.py
        # show_all_arrows() in skdb/pymates/pymates.py
    * code: write pymates.compatibility()
        * incorporate type-checking first (see skdb/doc/proposals/legos.py for a start)
        * then move on to rotations and checking for alignment of "interface points"/"control points"
        * then move on to the algorithms
    * code: graph traversal of pymates.Assembly
        * traversal
        * searching for parts/mates
    * merges:
        * merge skdb/doc/proposals/assemblies.txt + skdb/pymates/
        # merge skdb/doc/proposals/legos.py + skdb/pymates/pymates.py
    # make a 'legos' package in skdb/packages/ for Lego, Hole, and Peg interfaces (right?)
    * play with legos:
        # see the lego IGES/STEP files
            * not enough of them: model more lego bricks in HeeksCAD (save as IGES and STEP)
        * are the VRML parts of any use?
            * if so, see ldr2vrml
                * generate LDR files for all parts from LDraw
                * run ldr2vrml on all of these LDR files
        * pyldraw: interactive visualization of legos in python interpreter session + OpenCASCADE
            * alternatively: OpenGL rendering of the STL files (ldr2stl.py) (see pyopengl)
            # vpython loading of STL files (slow)
            * fix slow loading of STL files in OpenCASCADE
                * skdb/doc/proposals/occ_stl.py (slow)
                * skdb/import_tools/occ_pyldraw.py (also slow)
            * are the STEP/IGES files named the same as the parts are in the LDraw part library?
        * pov2rib: figure out antlr, play with dot g files
            * generate povray parser
                * figure out antlr
                * figure out pyparsing
                * convert from BNF->g grammar?
            * make something like pypov (the python-povray library that lets you use classes to generate povray objects)
            * write a wrapper for pypov: export to IGES/STEP instead of povray.
                * ex: when pypov.Circle() is called, call the OpenCASCADE BRepPrimAPI_MakeCircle method
            * convert lgeo's pov library of lego components (~700 parts)
    * improve pymates.compatibility():
        * algorithms to implement:
            * volume overlap algorithm
            * collision detection
            * interference fit
            * play
            * slop
        * explore python collision detection libraries
        * explore OpenCASCADE collision detection methods
    * [eventually] combine skdb/pymates/models/blockhole.yaml with skdb/packages/screw/metadata.yaml
    * [eventually] add list of compliant/rigid faces to the YAML metadata for a part
    * generate instructions to make a lego assembly
        * generate images (frame by frame)
            # wrote "stepper", a STEP file viewer. it sucks, unless there's some way to make screenshots other than the way InteractiveViewer.py does it
    * "make spacebase"
